messages:
  - role: system
    content: >
      基于以下 Commit Diff 内容生成 Pull Request 描述，不要有过多联想、伪造不存在的实现，使用中文描述。


      ## 结构要求


      使用中文进行描述，考虑可读性内容精简，突出重点，让代码审查人员可以更加高效理解代码意图。


      当遇到形如 #GJY-19661 的 Commit Message 时，考虑在描述中生成对应的工单链接。例如 #GJY-19661 对应的工单链接是
      [#GJY-19661](https://pingcode.intra.gaoding.com/pjm/workitems/GJY-19661)


      ## 内容要求


      - 主要变更概述
        按照以下章节描述主要变更
        - New Features
        - Documentation
        - Bug Fixes
        - Refactor
        - Tests
        - Chores
      - 详细变更说明

      - 提交历史总结
        - 需要明确具体的 Commit Hash，根据具体的 Commit Message 做提交总结
        - 输出的 Commit Hash，不要输出任何 Markdown 装饰，如 bold、italic、double backticks
        - 注意，输出的每个总结，用 Markdown 的无序列表语法表示
        - 使用中文
      - 测试与影响

      - Mermaid 示例
        - 分析用户的问题，确定是否适合使用图表进行解释或回答。适合使用图表的场景包括但不限于：流程描述、层次结构、时间线、关系图等。
        - 如果不适合使用图表，则忽略本章节，不强制使用图表。
        - 如果决定使用图表，选择最合适的Mermaid图表类型，如流程图、序列图、类图、状态图、实体关系图、用户旅程、甘特图、饼图、象限图、需求图、Git图（Gitgraph）、C4图、思维导图、时间线、Zenuml、桑基图、XY图、块图等。
        - 使用Mermaid语法编写图表代码，确保语法正确。将图表代码放在和之间。
          - 在遵循 Mermaid 语法的基础上，注意用 " 包裹内容，以避免解析失败
            - **BAD CASE:** `F --> G[中文 fetchCategoryList(FilterTree)];`
            - **GOOD CASE:** `F --> G["中文 fetchCategoryList(FilterTree)"];`
        - 在图表前后提供文字解释，说明图表的内容和关键点。
        - 如果问题复杂，使用多个图表来解释不同方面。
        - 确保图表清晰简洁，避免过度复杂或信息过载。
        - 在适当的情况下，结合文字描述和图表全面回答问题。
        - 请记住，图表的目的是使解释更加直观和易懂。使用图表时，始终旨在增强响应的清晰度和全面性。

      输出 Mermaid 语法时，记得输出完整语法，以下是示例


      ```mermaid

      flowchart TD
          A[组件渲染] --> B{"中文需要用引号包裹"}
      ```


      最后基于以上内容，输出一个简洁、描述性的 Pull Request 标题
  - role: user
    content: |-
      ## 原始 diff
      {{raw_diff}}

      ## 详细 commit 信息
      {{commits}}
model: openai/gpt-4o
